---
import { getCollection } from 'astro:content';
import "./../../styles.css"
import Nav from '../../components/Nav.astro';

export async function getStaticPaths() {
  const blogEntries = await getCollection('studies', ({data, body})=>{
	return (data.publish !== "false" || !body.trim().startsWith("%% Begin Waypoint %%"))
});
  return blogEntries.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}
// 2. For your template, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content } = await entry.render();


const pathArray = entry.id.split("/");
let title = pathArray[pathArray.length - 1];
title = title.slice(0, title.length - 3)
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.png" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
    	<link href="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css" rel="stylesheet">
		<title>Abban's notes :: {title}</title>
	</head>
	<body>
		<header>
			<button id="nav-toggle">(=)</button>
			<h1>{title}</h1>
			<button id="theme-toggle">\|/</button>
		</header>
		<main>
			<div id="left-nav" class="hidden">
				<Nav />
			</div>
			<article>
				<Content />
			</article>
			<div id="right-nav" class="hidden">
				<h4>Theme:</h4>
			</div>
		</main>
	</body>
	<script>
		let schemes;
		async function fetchColorschemes() {
			let cache = window.localStorage.getItem("colorschemes");
			if (cache) {
				schemes = JSON.parse(cache);
			} else {
				const query = await fetch(
					"https://api.github.com/repos/Abban-Fahim/base16-styles/contents/css-variables"
				);
				const files = await query.json();
				window.localStorage.setItem("colorschemes", JSON.stringify(files));
				schemes = files;
			}
			// filter the scehems to curate
			// Later add a text box for custom themes or radio button to remove filter
			let filtered = schemes.filter((el)=>{
				let found = false;
				let search = ["unikitty", "sakura", "sandcastle", "rose-pine", "monokai", "pico", "phd", "onedark", "ocean.", "nord", "mocha", "horizon", "gruvbox-dark-soft", "gruvbox-light-soft", "greenlight"];
				search.some( (s) => {
					if (el.name.indexOf(s) > -1) {
						found = true;
						return found;
					};
				});
				return found;
			});
			schemes = filtered;
		}
		async function applyScheme() {
			console.log("Applied scheme: " + selectedScheme);
			const query = await fetch(`https://raw.githubusercontent.com/Abban-Fahim/base16-styles/master/css-variables/base16-${selectedScheme}.css`);
			const file = await query.text();
			window.localStorage.setItem("selectedScheme", selectedScheme);
			let styleStrings = file.split("\n");
			for (let i = 3; i <= 18; i++) {
				document.body.style.setProperty(
					styleStrings[i].slice(2, 10),
					styleStrings[i].slice(12, 19)
				);
			}
		}
		
		const themeBox = document.getElementById("right-nav");
		const themeToggle = document.getElementById("theme-toggle");
		const navBox = document.getElementById("left-nav");
		const navToggle = document.getElementById("nav-toggle");

		navToggle?.addEventListener("click", ()=>{
			navBox?.classList.toggle("hidden");
		})
		themeToggle?.addEventListener("click", ()=>{
			themeBox?.classList.toggle("hidden");
		})
		
		// Set initial color scheme
		let selectedScheme = "unikitty-dark";
		let chachedScheme = window.localStorage.getItem("selectedScheme");
		if (chachedScheme) {
			selectedScheme = chachedScheme;
		}
		fetchColorschemes();
		applyScheme();
		
		// Render buttons for changing color scheme
		for (let i = 0; i < schemes.length; i++) {
			let el = document.createElement("button");
			el.textContent = schemes[i].name.slice(7, schemes[i].name.length-4);
			el.addEventListener("click", ()=>{
				selectedScheme = el.textContent;
				let oldButton = document.querySelector(".theme-selected");
				if (oldButton) {
					oldButton.className = ""
				};
				el.className = "theme-selected";
				applyScheme()
			})
			themeBox.appendChild(el);
		}

		// Fix styling classes for math environments
		const allMath = document.querySelectorAll(".katex");
		if (allMath) {
			allMath.forEach((el)=>{
				let prevSibling = el.previousSibling;
				let nextSibling = el.nextSibling;
				if (prevSibling?.nodeName === "#text" && prevSibling?.nodeValue !== "\n"  || nextSibling?.nodeName === "#text" && nextSibling?.nodeValue !== "\n" ) {
					el.classList.add("inline")
				} else {
					el.classList.add("display")
				}
			})
		}

		// Open the tree view for the current page
		let pages = window.location.pathname.slice(13).split("/");
		let elements = document.querySelectorAll("details");
		let searchFinished = false, j = 0;
		for (let i = 0; i < elements.length && !searchFinished; i++) {
			if (elements[i].id.endsWith(pages[j])) {
				elements[i].setAttribute("open", "");
				j++;
			}
			if (j === (pages.length - 1)) {
				let linkSeach = false;
				let links = elements[i].children[1].children;
				for (let k = 0; k < links.length && !linkSeach; k++) {
					if (links[k].getAttribute("href").endsWith(pages[j])) {
						console.log(links[k]);
						links[k].classList.add("open");
						linkSeach = true;
					}
				}
				searchFinished = true;
			}
		}
	</script>
</html>

